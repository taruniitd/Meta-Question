//https://www.youtube.com/watch?v=DJvw8jCmxUU
//https://medium.com/trick-the-interviwer/regular-expression-matching-9972eb74c03
#include <iostream>
#include <cstring>
using namespace std;

/*void dP_check_func(int s_len, int p_len, bool dP[][p_len])
{
    for(int i = 0; i <= s_len; i++)
    {
        for(int j = 0; j <= p_len; j++)
        {
            cout << dP[i][j] << "   ";
        }
        cout << endl;
    }
}*/

bool strMatch_1(char str[], char pattern[], int s_len, int p_len)
{
    bool dP[p_len + 1][s_len + 1];
    memset(dP, false, sizeof(dP));
    
    for(int i = 0; i < p_len; i++)
    {
        for(int j = 0; j < s_len; j++)
        {
            if( i == 0 && j == 0)
                dP[i][j] = true;
            else if(i == 0)
                dP[i][j] = false;
            else if(j == 0)
            {
                if(pattern[i - 1] == '*')
                {
                    dP[i][j] = dP[i - 2][j];
                }
                else
                {
                    dP[i][j] = false;
                }
            }
            else 
            {
                if(pattern[i - 1] == '*')
                {
                    dP[i][j] = dP[i - 1][j];
                    if(pattern[i - 2] == '.' || pattern[i - 2] == str[j - 1] )
                    {
                        dP[i][j] = dP[i][j] || dP[i][j - 1];
                    }
                }
                else if(pattern[i - 1] == '.')
                {
                    dP[i][j] = dP[i - 1][j - 1];
                }
                else if(pattern[i - 1] == str[j - 1])
                {
                    dP[i][j] = dP[i - 1][j - 1];
                }
                else
                {
                    dP[i][j] = false;
                }
            }
        }
    }
    return dP[p_len][s_len];
}
bool strMatch(char str[], char pattern[], int s_len, int p_len)
{
    if(p_len == 0 && s_len != 0)
        return false;
    bool dP[s_len + 1][p_len + 1];
    memset(dP, false, sizeof(dP));
    
    dP[0][0] = true;
    
    for(int i = 1; i <= p_len; i++)
    {
        if(pattern[i - 1] == '*')
            dP[0][i] = dP[0][i - 2];
    }
    
    for(int i = 1; i <= s_len; i++)
    {
        for(int j = 1; j <= p_len; j++)
        {
            if(str[i - 1] == pattern[j - 1] || pattern[j - 1] == '.')
                dP[i][j] = dP[i - 1][j - 1];
            else if(pattern[j - 1] == '*')
            {
                if(pattern[j - 2] == str[i - 1] || pattern[j - 2] == '.')
                {
                    dP[i][j] = dP[i - 1][j];
                }
                dP[i][j] = dP[i][j] || dP[i][j - 2];
            }
            else
                dP[i][j] = false;
        }
    }
    
    for(int i = 0; i <= s_len; i++)
    {
        for(int j = 0; j <= p_len; j++)
        {
            cout << dP[i][j] << "   ";
        }
        cout << endl;
    }
    cout << "===================" << endl;
    return dP[s_len][p_len];
}

int main() {
	//char str[] = "baaabab";
	//char pattern[] = "*****ba*****ab";
	
	/*if(strMatch(str,pattern,strlen(str),strlen(pattern)))
	    cout << "pattern matched" <<endl;
	else
	    cout << "pattern did not matched" << endl;*/
	 char str1[] =     "mississippi";
	 char pattern1[] = "mis*i.*p*i";
	if(strMatch(str1,pattern1,strlen(str1),strlen(pattern1)))
	    cout << "pattern matched" <<endl;
	else
	    cout << "pattern did not matched" << endl;
	return 0;
}
